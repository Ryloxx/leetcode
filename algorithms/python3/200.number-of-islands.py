#
# @lc app=leetcode id=200 lang=python3
#
# [200] Number of Islands
#
# https://leetcode.com/problems/number-of-islands/description/
#
# algorithms
# Medium (54.06%)
# Likes:    16612
# Dislikes: 382
# Total Accepted:    1.8M
# Total Submissions: 3.3M
# Testcase Example:  '[["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0"
# ,"0","0"],["0","0","0","0","0"]]'
#
# Given an m x n 2D binary grid grid which represents a map of '1's (land) and
# '0's (water), return the number of islands.
#
# An island is surrounded by water and is formed by connecting adjacent lands
# horizontally or vertically. You may assume all four edges of the grid are all
# surrounded by water.
#
#
# Example 1:
#
#
# Input: grid = [
# ⁠ ["1","1","1","1","0"],
# ⁠ ["1","1","0","1","0"],
# ⁠ ["1","1","0","0","0"],
# ⁠ ["0","0","0","0","0"]
# ]
# Output: 1
#
#
# Example 2:
#
#
# Input: grid = [
# ⁠ ["1","1","0","0","0"],
# ⁠ ["1","1","0","0","0"],
# ⁠ ["0","0","1","0","0"],
# ⁠ ["0","0","0","1","1"]
# ]
# Output: 3
#
#
#
# Constraints:
#
#
# m == grid.length
# n == grid[i].length
# 1 <= m, n <= 300
# grid[i][j] is '0' or '1'.
#
#
#
from typing import List
from algo_input import run
from types import MethodType

# @lc code=start


class Solution:

    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]:
            return 0

        def fill(i, j):
            a = [(i, j)]
            while a:
                y, x = a.pop()
                for n in ((y + 1, x), (y - 1, x), (y, x + 1), (y, x - 1)):
                    if grid[n[0]][n[1]] == '1':
                        a.append(n)
                grid[y][x] = '0'

        h = len(grid) + 2
        w = len(grid[0]) + 2
        grid = [['0'] * w] + [['0'] + x + ['0'] for x in grid] + [['0'] * w]
        return sum(not fill(i, j) for i in range(h) for j in range(w)
                   if grid[i][j] == '1')


# @lc code=end
if __name__ == "__main__":
    run(
        MethodType(Solution.numIslands, Solution()),
        [
            [[[[
                "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1",
                "1", "1", "1", "0", "1", "0", "1", "1"
            ],
               [
                   "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "0", "1", "1", "1", "1", "1", "0"
               ],
               [
                   "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1",
                   "0", "1", "1", "1", "0", "1", "1", "1"
               ],
               [
                   "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "0", "1", "1", "0", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "0", "1", "1", "1", "1", "0", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1",
                   "1", "0", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0",
                   "1", "1", "1", "1", "0", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "0", "1", "1", "1", "1", "1", "1", "0"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "0", "1", "1", "1", "1", "0", "0"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ],
               [
                   "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1", "1", "1", "1", "1", "1", "1", "1"
               ]]], 1],
            [[[["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"],
               ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]]], 1],
            [[[["1", "1", "0", "0", "0"], ["1", "1", "0", "0", "0"],
               ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]], 3],
            [[[[]]], 0],
            [[[["1"]]], 1],
            [[[["0"]]], 0],
            [[[["0", "0", "0", "0"]]], 0],
            [[[["1", "1", "1", "1"]]], 1],
            [[[["0", "1", "0", "1"]]], 2],
            [[[["0"], ["0"], ["0"], ["0"]]], 0],
            [[[["1"], ["1"], ["1"], ["1"]]], 1],
            [[[["0"], ["1"], ["0"], ["1"]]], 2],
            [[
                list([str((y + x) % 2) for x in range(300)]
                     for y in range(300))
            ], 150 * 300],
        ],
    )
