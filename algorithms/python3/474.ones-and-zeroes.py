#
# @lc app=leetcode id=474 lang=python3
#
# [474] Ones and Zeroes
#
# https://leetcode.com/problems/ones-and-zeroes/description/
#
# algorithms
# Medium (44.61%)
# Likes:    3001
# Dislikes: 328
# Total Accepted:    111.7K
# Total Submissions: 248.7K
# Testcase Example:  '["10","0001","111001","1","0"]\n5\n3'
#
# You are given an array of binary strings strs and two integers m and n.
#
# Return the size of the largest subset of strs such that there are at most m
# 0's and n 1's in the subset.
#
# A set x is a subset of a set y if all elements of x are also elements of
# y.
#
#
# Example 1:
#
#
# Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
# Output: 4
# Explanation: The largest subset with at most 5 0's and 3 1's is {"10",
# "0001", "1", "0"}, so the answer is 4.
# Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
# {"111001"} is an invalid subset because it contains 4 1's, greater than the
# maximum of 3.
#
#
# Example 2:
#
#
# Input: strs = ["10","0","1"], m = 1, n = 1
# Output: 2
# Explanation: The largest subset is {"0", "1"}, so the answer is 2.
#
#
#
# Constraints:
#
#
# 1 <= strs.length <= 600
# 1 <= strs[i].length <= 100
# strs[i] consists only of digits '0' and '1'.
# 1 <= m, n <= 100
#
#
#

from functools import cache
from types import MethodType
from typing import List

from algo_input import run

# @lc code=start


class Solution:

    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        strs = list(map(lambda x: (x.count('0'), x.count('1')), strs))
        dp = {}

        @cache
        def dp(current_0=0, current_1=0, idx=0):
            if current_1 < 0 or current_0 < 0:
                return -float('inf')
            if idx >= len(strs):
                return 0
            c_0, c_1 = strs[idx]
            return max(dp(current_0, current_1, idx + 1),
                       dp(current_0 - c_0, current_1 - c_1, idx + 1) + 1)

        return dp(m, n)


# @lc code=end

if __name__ == "__main__":
    run(MethodType(Solution.findMaxForm, Solution()), [
        [[["10", "0001", "111001", "1", "0"], 5, 3], 4],
        [[["10", "0", "1"], 1, 1], 2],
        [[["0"], 1, 1], 1],
        [[[
            "0", "11", "1000", "01", "0", "101", "1", "1", "1", "0", "0", "0",
            "0", "1", "0", "0110101", "0", "11", "01", "00", "01111", "0011",
            "1", "1000", "0", "11101", "1", "0", "10", "0111"
        ], 9, 80], 17],
        [[[
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101", "1101", "0101",
            "1101", "0101", "1101", "0101", "1101", "0101"
        ], 100, 100], 50],
    ])
