#
# @lc app=leetcode id=1332 lang=python3
#
# [1332] Remove Palindromic Subsequences
#
# https://leetcode.com/problems/remove-palindromic-subsequences/description/
#
# algorithms
# Easy (69.61%)
# Likes:    807
# Dislikes: 970
# Total Accepted:    82.2K
# Total Submissions: 110.9K
# Testcase Example:  '"ababa"'
#
# You are given a string s consisting only of letters 'a' and 'b'. In a single
# step you can remove one palindromic subsequence from s.
#
# Return the minimum number of steps to make the given string empty.
#
# A string is a subsequence of a given string if it is generated by deleting
# some characters of a given string without changing its order. Note that a
# subsequence does not necessarily need to be contiguous.
#
# A string is called palindrome if is one that reads the same backward as well
# as forward.
#
#
# Example 1:
#
#
# Input: s = "ababa"
# Output: 1
# Explanation: s is already a palindrome, so its entirety can be removed in a
# single step.
#
#
# Example 2:
#
#
# Input: s = "abb"
# Output: 2
# Explanation: "abb" -> "bb" -> "".
# Remove palindromic subsequence "a" then "bb".
#
#
# Example 3:
#
#
# Input: s = "baabb"
# Output: 2
# Explanation: "baabb" -> "b" -> "".
# Remove palindromic subsequence "baab" then "b".
#
#
#
# Constraints:
#
#
# 1 <= s.length <= 1000
# s[i] is either 'a' or 'b'.
#
#
#
from algo_input import run
from types import MethodType


# @lc code=start
class Solution:

    def removePalindromeSub(self, s: str) -> int:
        if not s:
            return 0
        i, j = 0, len(s) - 1
        while i < j and s[i] == s[j]:
            i += 1
            j -= 1
        return 1 if i >= j else 2


# @lc code=end
if __name__ == "__main__":
    run(
        MethodType(Solution.removePalindromeSub, Solution()),
        [
            [["ababa"], 1],
            [["abb"], 2],
            [["baabb"], 2],
            [["bbbb"], 1],
            [["aaaa"], 1],
            [[""], 0],
            [["ababababbbbbabbaaabab"], 2],
        ],
    )
