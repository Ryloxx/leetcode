/*
 * @lc app=leetcode id=779 lang=rust
 *
 * [779] K-th Symbol in Grammar
 *
 * https://leetcode.com/problems/k-th-symbol-in-grammar/description/
 *
 * algorithms
 * Medium (41.85%)
 * Likes:    3423
 * Dislikes: 353
 * Total Accepted:    170.7K
 * Total Submissions: 375.8K
 * Testcase Example:  '1\n1'
 *
 * We build a table of n rows (1-indexed). We start by writing 0 in the 1^st
 * row. Now in every subsequent row, we look at the previous row and replace
 * each occurrence of 0 with 01, and each occurrence of 1 with 10.
 *
 *
 * For example, for n = 3, the 1^st row is 0, the 2^nd row is 01, and the
 * 3^rd row is 0110.
 *
 *
 * Given two integer n and k, return the k^th (1-indexed) symbol in the n^th
 * row of a table of n rows.
 *
 *
 * Example 1:
 *
 *
 * Input: n = 1, k = 1
 * Output: 0
 * Explanation: row 1: 0
 *
 *
 * Example 2:
 *
 *
 * Input: n = 2, k = 1
 * Output: 0
 * Explanation:
 * row 1: 0
 * row 2: 01
 *
 *
 * Example 3:
 *
 *
 * Input: n = 2, k = 2
 * Output: 1
 * Explanation:
 * row 1: 0
 * row 2: 01
 *
 *
 *
 * Constraints:
 *
 *
 * 1 <= n <= 30
 * 1 <= k <= 2^n - 1
 *
 *
 */
struct Solution;
// @lc code=start
impl Solution {
    pub fn kth_grammar(_n: i32, k: i32) -> i32 {
        (((k - 1).count_ones()) & 1) as i32
    }

    // pub fn kth_grammar(n: i32, mut k: i32) -> i32 {
    //     let mut res = 0;
    //     let mut step = 1 << (n - 1);
    //     while step > 0 {
    //         if k > step {
    //             k -= step;
    //             res += 1;
    //         }
    //         step >>= 1;
    //     }
    //     res & 1
    // }
}
// @lc code=end

fn main() {
    rust::test_algo(
        |e| Solution::kth_grammar(e.0, e.1),
        vec![
            ((1, 1), 0),
            ((2, 1), 0),
            ((2, 2), 1),
            ((3, 1), 0),
            ((6, 21), 0),
            ((7, 33), 1),
            ((22, 278170), 0),
            ((6, 3), 1),
            ((23, 3852830), 0),
            ((15, 11266), 0),
            ((1, 1), 0),
            ((24, 5910416), 0),
            ((18, 6472), 1),
            ((4, 8), 1),
            ((16, 19217), 1),
            ((7, 27), 1),
            ((15, 6308), 0),
            ((15, 6359), 1),
            ((20, 177870), 1),
            ((22, 531703), 0),
            ((17, 3464), 1),
            ((28, 81431619), 1),
            ((29, 218485075), 0),
            ((20, 483330), 0),
            ((14, 2913), 1),
            ((22, 1406640), 0),
            ((10, 139), 1),
            ((9, 55), 0),
            ((23, 1008029), 1),
            ((17, 32226), 0),
            ((14, 6325), 0),
            ((2, 1), 0),
            ((15, 4101), 0),
            ((23, 3019779), 1),
            ((24, 159471), 0),
            ((25, 5174760), 0),
            ((9, 226), 0),
            ((20, 326490), 0),
            ((28, 116010179), 1),
            ((9, 96), 0),
            ((22, 1091392), 0),
            ((30, 140479817), 1),
            ((1, 1), 0),
            ((24, 7201444), 1),
            ((14, 4539), 1),
            ((6, 13), 0),
            ((2, 1), 0),
            ((3, 3), 1),
            ((9, 185), 0),
            ((22, 2044496), 1),
            ((21, 820316), 1),
            ((28, 107118859), 1),
            ((14, 1807), 0),
            ((26, 3828318), 1),
            ((18, 1988), 1),
            ((8, 49), 0),
            ((19, 202513), 1),
            ((20, 473837), 0),
            ((23, 3408971), 1),
            ((15, 16129), 0),
            ((13, 984), 0),
            ((29, 16776410), 1),
            ((10, 190), 0),
            ((23, 8705), 0),
            ((22, 548255), 1),
            ((28, 46188262), 0),
            ((20, 391692), 1),
            ((9, 160), 0),
            ((30, 469728442), 0),
            ((24, 1187918), 1),
            ((8, 41), 0),
            ((4, 1), 0),
            ((23, 2813596), 0),
            ((27, 54239389), 1),
            ((20, 284800), 1),
            ((21, 250565), 1),
            ((30, 333348383), 1),
            ((7, 37), 0),
            ((23, 3476749), 1),
            ((16, 20614), 1),
            ((29, 84698719), 1),
            ((22, 1410806), 0),
            ((6, 25), 0),
            ((30, 80240172), 1),
            ((24, 8290238), 1),
            ((11, 643), 1),
            ((17, 9121), 1),
            ((6, 14), 1),
            ((20, 98635), 0),
            ((16, 10069), 1),
            ((19, 54349), 1),
            ((30, 233622062), 0),
            ((7, 2), 1),
            ((23, 2167973), 1),
            ((3, 2), 1),
            ((21, 29428), 0),
            ((21, 577337), 0),
            ((15, 15034), 1),
            ((12, 1624), 1),
            ((21, 885812), 1),
            ((22, 1740159), 1),
            ((30, 20875531), 1),
            ((28, 73760850), 1),
        ],
        |a, b| a == b,
    );
}
